

module HEX_DISPLAY(HEX0, SW);	//directly uses keywords to utilize the switches and the HEX display on the FGBA board 
																//to avoid assigning other variables
	input [3:0]SW;
	output [6:0]HEX0;
	
	//checks which combinations require of each HEX display segment (0-6) to light up; this allows you to use 7 equations
	//an alternative is creating 16 cases in which you would explictly define [6:0]HEX0
	assign HEX0[0] = (~SW[3]&~SW[2]&~SW[1]&SW[0])|(~SW[3]&SW[2]&~SW[1]&~SW[0])|(SW[3]&~SW[2]&SW[1]&SW[0])|(SW[3]&SW[2]&~SW[1]&~SW[0])|(SW[3]&SW[2]&~SW[1]&SW[0]);
	assign HEX0[1] = (~SW[3]&SW[2]&~SW[1]&SW[0])|(~SW[3]&SW[2]&SW[1]&~SW[0])|(SW[3]&~SW[2]&SW[1]&SW[0])|(SW[3]&SW[2]&~SW[1]&~SW[0])|(SW[3]&SW[2]&SW[1]&SW[0]);
	assign HEX0[2] = (~SW[3]&~SW[2]&SW[1]&~SW[0])|(SW[3]&SW[2]&~SW[1]&~SW[0])|(SW[3]&SW[2]&SW[1]&~SW[0])|(SW[3]&SW[2]&SW[1]&SW[0]);
	assign HEX0[3] = (~SW[3]&~SW[2]&~SW[1]&SW[0])|(~SW[3]&SW[2]&~SW[1]&~SW[0])|(~SW[3]&SW[2]&SW[1]&SW[0])|(SW[3]&~SW[2]&~SW[1]&SW[0])|(SW[3]&~SW[2]&SW[1]&~SW[0])|(SW[3]&SW[2]&SW[1]&SW[0]);
	assign HEX0[4] = (~SW[3]&~SW[2]&~SW[1]&SW[0])|(~SW[3]&~SW[2]&SW[1]&SW[0])|(~SW[3]&SW[2]&~SW[1]&~SW[0])|(~SW[3]&SW[2]&~SW[1]&SW[0])|(~SW[3]&SW[2]&SW[1]&SW[0])|(SW[3]&~SW[2]&~SW[1]&SW[0]);
	assign HEX0[5] = (~SW[3]&~SW[2]&~SW[1]&SW[0])|(~SW[3]&~SW[2]&SW[1]&~SW[0])|(~SW[3]&~SW[2]&SW[1]&SW[0])|(~SW[3]&SW[2]&SW[1]&SW[0])|(SW[3]&SW[2]&~SW[1]&~SW[0])|(SW[3]&SW[2]&~SW[1]&SW[0]);
	assign HEX0[6] = (~SW[3]&~SW[2]&~SW[1]&~SW[0])|(~SW[3]&~SW[2]&~SW[1]&SW[0])|(~SW[3]&SW[2]&SW[1]&SW[0]);
	
endmodule
	
	
	//below are other protoype designs
	
	
	/*
module HEX_decoder([3:0]SW; reg [6:0]HEX = 0);
	input [3:0]SW;
	output [6:0]HEX;
	
	always@(*)
	begin
		if(~SW[3]&~SW[2]&~SW[1]&~SW[0])
			assign HEX[6]=1;
		else if(~SW[3]&~SW[2]&~SW[1]&SW[0])
			assign HEX[0,3:6] = 1;
		else if(~SW[3]&~SW[2]&SW[1]&~SW[0])
			assign HEX[2,5] = 1;
		else if(~SW[3]&~SW[2]&SW[1]&SW[0])
			assign HEX[5,4] = 1;
		else if(~SW[3]&SW[2]&~SW[1]&~SW[0])
			assign HEX[4,3,0] = 1;
		
	end
	endmodule
*/
	
	/*always@(*)
		begin
			case(SW)
				4'b0000: HEX = 7'b0000001; // "0"  
				4'b0001: HEX = 7'b1001111; // "1" 
				4'b0010: HEX = 7'b0010010; // "2" 
				4'b0011: HEX = 7'b0000110; // "3" 
			   4'b0100: HEX = 7'b1001100; // "4" 
				4'b0101: HEX = 7'b0100100; // "5" 
				4'b0110: HEX = 7'b0100000; // "6" 
				4'b0111: HEX = 7'b0001111; // "7" 
				4'b1000: HEX = 7'b0000000; // "8"  
				4'b1001: HEX = 7'b0001100; // "9" 
				4'b1001: HEX = 7'b0001000; // "a" 
			   4'b1001: HEX = 7'b1100000; // "b" 
				4'b1001: HEX = 7'b1110010; // "c" 
				4'b1001: HEX = 7'b1000010; // "d" 
				4'b1001: HEX = 7'b0010000; // "e"
				4'b1001: HEX = 7'b0111000; // "f"
			endcase
		end
endmodule
	
	/*
	assign HEX[6] = (~SW[3]&~SW[2]&~SW[1]&~SW[0]);
	assign HEX[6:3,0] = (~SW[3]&~SW[2]&~SW[1]&SW[0]);
	assign HEX[5,2] = (~SW[3]&~SW[2]&SW[1]&~SW[0]);
	assign HEX[5,4] = (~SW[3]&~SW[2]&SW[1]&SW[0])
	assign HEX[4,3,0] = (~SW[3]&SW[2]&~SW[1]&~SW[0])